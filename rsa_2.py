from Crypto.Util.number import getPrime, isPrime, bytes_to_long
from secret import flag_2
# nextPrime return the smallest prime number greater than p


def nextPrime(p):
    p = p + 1
    while True:
        if isPrime(p):
            return p
        p = p + 1


p = getPrime(1024)
q = nextPrime(p + 2 ** 12)
N = p * q
print(N)
# N = 10799707855049184835356800144584402336488323567196125271410785434934607646655707535695300158522207277903985694277430336618240824317794378238751377467045990847991178300634189263244483451697491538721954454684895201172150782259801485102586905037888018812595055984639310843436577513367930786892588950031225413597007724286521090247141695458131506701556860736011067620631671110820994006502643498651755916049938509302771169820763840975760805985975292392574391599559535628069941402466959008897229058712098894530417650596253017034841956162849919553880351708496188591833791260775348068784187796950488276317161584298895015989637
e = 65537
m = bytes_to_long(flag_2)
c = pow(m, e, N)
print(c)
# c = 2290979376575880824829940455310219339625147317451473246522908360802784639354465433983179350067562540307674476941603297021537058288867560679971425879458613675241473162395285983098331011038523808130834581611034322205647960572018198343691660548890377660673063018592006236329434188732929255752464559495178813276007833274278845809391972699841424743197490916288177179878330185921807138358251472400236951093358381174643603036666160332705716674303375691915088739273493902155702903370882927862230236822318829609854459923165776996321811152618650142330155337053895624843728242648920254720476718565365035365746864411015168582037
